package org.deadmandungeons.deadmanplugin;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;

import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;

public class PluginFile {
	
	private final DeadmanPlugin plugin;
	private final String filePath;
	private final String defaultFilePath;
	
	private File configFile;
	private FileConfiguration fileConfig;
	private YamlConfiguration defaultConfig;
	
	/**
	 * @param instance - An instance of the Deadman plugin this file belongs to
	 * @param filePath - The relative path to the file in the plugin's data folder
	 * @param defaultFilePath - The path to the resource file bundled in the plugin's jar
	 * that should be saved as the file specified by filePath if it does not already exist.
	 * If this is null, a new file will be created if one does not yet exist at filePath.
	 * @throws IllegalStateException if the plugin has not yet been initialized
	 */
	public PluginFile(DeadmanPlugin instance, String filePath, String defaultFilePath) {
		if (!instance.isJavaPluginLoaded()) {
			throw new IllegalStateException("This plugin has not been loaded yet! Cannot create plugin file before plugin is loaded");
		}
		this.plugin = instance;
		this.filePath = plugin.getDataFolder().getPath() + File.separator + filePath;
		this.defaultFilePath = defaultFilePath;
		this.configFile = new File(this.filePath);
		
		if (!configFile.exists()) {
			try {
				if (configFile.getParentFile() != null) {
					configFile.getParentFile().mkdirs();
				}
				if (defaultFilePath != null) {
					plugin.getLogger().info("Saving default '" + defaultFilePath + "' config file as '" + filePath + "'");
					saveDefaultConfig(defaultFilePath);
				} else {
					plugin.getLogger().info("Creating '" + filePath + "' file");
					configFile.createNewFile();
					String fileUsageWarning = "\n " + plugin.getName() + " " + filePath.replaceAll("(.*)\\" + File.separator, "")
							+ " file\n\n WARNING: THIS FILE IS AUTOMATICALLY GENERATED."
							+ " If you modify this file by\n hand, be aware that A SINGLE MISTYPED CHARACTER CAN CORRUPT THE FILE. If\n "
							+ plugin.getName() + " is unable to parse the file, the plugin will BREAK!\n\n REMEMBER TO KEEP PERIODICAL BACKUPS.\n ";
					getConfig().options().header(fileUsageWarning);
					saveConfig();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (defaultFilePath != null) {
			loadDefaultConfig();
		}
	}
	
	public void loadConfig() {
		fileConfig = YamlConfiguration.loadConfiguration(configFile);
		
		// Look for defaults in the jar
		InputStream defConfigStream = plugin.getResource(filePath);
		if (defConfigStream != null) {
			defaultConfig = YamlConfiguration.loadConfiguration(defConfigStream);
			fileConfig.setDefaults(defaultConfig);
		}
	}
	
	public void loadDefaultConfig() {
		if (defaultFilePath == null) {
			throw new IllegalStateException("This PluginFile is not a resource file derived from the plugin jar. There is no default filePath");
		}
		InputStream defConfigStream = plugin.getResource(defaultFilePath);
		if (defConfigStream != null) {
			defaultConfig = YamlConfiguration.loadConfiguration(defConfigStream);
		}
	}
	
	public FileConfiguration getConfig() {
		if (fileConfig == null) {
			loadConfig();
		}
		return fileConfig;
	}
	
	public YamlConfiguration getDefaultConfig() {
		if (defaultConfig == null) {
			loadDefaultConfig();
		}
		return defaultConfig;
	}
	
	public void saveConfig() {
		if (fileConfig != null && configFile != null) {
			try {
				getConfig().save(configFile);
			} catch (IOException ex) {
				Bukkit.getServer().getLogger().log(Level.SEVERE, "Could not save config to " + configFile, ex);
			}
		}
	}
	
	/**
	 * Save a default resource file packaged in the plugins jar to the plugins root directory
	 * @param defaultFilePath - The path inside the jar to the desired resource
	 */
	public void saveDefaultConfig(String defaultFilePath) {
		loadDefaultConfig();
		if (!configFile.exists()) {
			// save the default resource at the given path to the root plugin directory
			plugin.saveResource(defaultFilePath, false);
		}
		if (!configFile.exists()) {
			File createdFile = new File(plugin.getDataFolder().getPath() + File.separator + defaultFilePath);
			// move the saved resource file to the appropriate directory
			if (!createdFile.renameTo(configFile)) {
				plugin.getLogger().log(Level.SEVERE, defaultFilePath + " failed to move!");
			}
		}
	}
	
}
