package org.deadmandungeons.deadmanplugin;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;

import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.Plugin;



public class PluginFile {
	
	
	private final String filePath;
	private final Plugin plugin;
	
	private File configFile;
	private FileConfiguration fileConfig;
	private YamlConfiguration defaultConfig;
	
	public PluginFile(Plugin instance, String filePath) {
		this.plugin = instance;
		this.filePath = filePath;
		this.configFile = new File(filePath);
		this.defaultConfig = null;
		
		if (!configFile.exists()) {
			try {
				plugin.getLogger().info("Creating " + filePath + " file");
				configFile.createNewFile();
				String fileUsageWarning = "\n " + plugin.getName() + " " + filePath.replaceAll("(.*)/", "") 
						+ " file\n\n WARNING: THIS FILE IS AUTOMATICALLY GENERATED. " 
						+ " If you modify this file by\n hand, be aware that A SINGLE MISTYPED CHARACTER CAN CORRUPT THE FILE. If\n" 
						+ plugin.getName() + " is unable to parse the file, the plugin will BREAK!\n\n REMEMBER TO KEEP PERIODICAL BACKUPS.\n ";
				getConfig().options().header(fileUsageWarning);
				saveConfig();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void reloadConfig() {
		fileConfig = YamlConfiguration.loadConfiguration(configFile);

		// Look for defaults in the jar
		InputStream defConfigStream = plugin.getResource(filePath);
		if (defConfigStream != null) {
			defaultConfig = YamlConfiguration.loadConfiguration(defConfigStream);
			fileConfig.setDefaults(defaultConfig);
		}
	}
	
	public void reloadDefaultConfig() {        
		InputStream defConfigStream = plugin.getResource(filePath);
		if (defConfigStream != null) {
			defaultConfig = YamlConfiguration.loadConfiguration(defConfigStream);
		}
	}
	
	public FileConfiguration getConfig() {
		if (fileConfig == null) {
			this.reloadConfig();
		}
		return fileConfig;
	}
	
	public YamlConfiguration getDefaultConfig() {
		if (defaultConfig == null) {
			this.reloadDefaultConfig();
		}
		return defaultConfig;
	}
	
	public void saveConfig() {
		if (fileConfig != null && configFile != null) {
			try {
				getConfig().save(configFile);
			} catch (IOException ex) {
				Bukkit.getServer().getLogger().log(Level.SEVERE, "Could not save config to " + configFile, ex);
			}
		}
	}
	
	public PluginFile saveDefaultConfig(String defaultFilegName) {
		if (!configFile.exists()) {            
			this.plugin.saveResource(defaultFilegName, false);
		}
		if (!configFile.exists()) {
			File createdFile = new File(this.plugin.getDataFolder().getPath() + defaultFilegName);
			if (!createdFile.renameTo(configFile)) {
				plugin.getLogger().log(Level.SEVERE, defaultFilegName + " failed to move!");
			}
		}
		return this;
	}

	
}
